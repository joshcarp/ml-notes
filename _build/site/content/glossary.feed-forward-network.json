{"kind":"Article","sha256":"0cee21a656e41c95f56b115ccc1bccc7f66b614426667ab067c9ed7085262981","slug":"glossary.feed-forward-network","location":"/glossary/feed_forward_network.md","dependencies":[],"frontmatter":{"title":"Feed-Forward Network","content_includes_title":false,"github":"https://github.com/joshcarp/ml-notes","exports":[{"format":"md","filename":"feed_forward_network.md","url":"/feed_forward_network-6f881a99057e602eb4ad087cc1f313d2.md"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Definition","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"kbwjwb0bEH"}],"identifier":"definition","label":"Definition","html_id":"definition","implicit":true,"key":"JKW7OuQ71q"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"A Feed-Forward Network (FFN) is a fundamental neural network architecture where information flows in one direction, from input to output layers, through one or more hidden layers, without any cycles or loops. Each neuron in a layer is connected to all neurons in the subsequent layer, but there are no connections between neurons in the same layer or backwards connections. FFNs are also known as Multi-Layer Perceptrons (MLPs) and form basic building blocks in more complex architectures like transformers.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"JX5rJ5NIag"}],"key":"hy6ZrKcxD8"},{"type":"heading","depth":2,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Tags","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"EKDCOCUs89"}],"identifier":"tags","label":"Tags","html_id":"tags","implicit":true,"key":"os1wZ4eLMK"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Neural Networks, Architecture, Basic Concepts, MLP","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"KnKbwpY9YX"}],"key":"ikSX4bAPS9"},{"type":"heading","depth":2,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"References","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"yK4M68BDIp"}],"identifier":"references","label":"References","html_id":"references","implicit":true,"key":"PZmebJQBaG"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Rumelhart, D. E., Hinton, G. E., & Williams, R. J. (1986). Learning representations by back-propagating errors. Nature, 323(6088), 533-536. ","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"acEn6lViVD"},{"type":"cite","url":"https://doi.org/10.1038/323533a0","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Rumelhart ","key":"qY2xGbu1sn"},{"type":"emphasis","children":[{"type":"text","value":"et al.","key":"iT3Fv83Szf"}],"key":"eKuw1vbIkw"},{"type":"text","value":" (1986)","key":"XvgWc2DLbo"}],"kind":"narrative","label":"Rumelhart_1986","identifier":"https://doi.org/10.1038/323533a0","enumerator":"1","key":"XQxGv6DwAx"}],"key":"OnRahbTkyj"}],"key":"Al2ohDzYBC"}],"key":"aT2ylihU06"}],"key":"WjmKlI4ym0"},"references":{"cite":{"order":["Rumelhart_1986"],"data":{"Rumelhart_1986":{"label":"Rumelhart_1986","enumerator":"1","doi":"10.1038/323533a0","html":"Rumelhart, D. E., Hinton, G. E., & Williams, R. J. (1986). Learning representations by back-propagating errors. <i>Nature</i>, <i>323</i>(6088), 533â€“536. <a target=\"_blank\" rel=\"noreferrer\" href=\"https://doi.org/10.1038/323533a0\">10.1038/323533a0</a>","url":"https://doi.org/10.1038/323533a0"}}}}}